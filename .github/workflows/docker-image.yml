name: Docker Image CI/CD

on:
  push:
    branches: [ "main", "fix", "feature" ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'Meilisearch4TelegramSearchCKJ/src/**'            

  pull_request:
    branches: [ "main", "fix", "feature" ]
    paths:
      - 'Meilisearch4TelegramSearchCKJ/src/**'     
  workflow_dispatch:
  

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ format('{0}/{1}', github.repository_owner, 'meilisearch4telegramsearchckj') }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      checks: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,amd64'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Clean Docker cache
        run: docker builder prune --force --all

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 构建但不推送，用于本地扫描
      - name: Build local image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan-target

      # 在本地镜像上运行 Trivy 扫描
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan-target
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # 如果扫描通过，构建并推送多架构镜像
      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      # 等待镜像可用
      - name: Wait for image to be available
        if: github.event_name != 'pull_request'
        run: |
          echo "Waiting for image to be available..."
          for i in {1..30}; do
            if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest > /dev/null 2>&1; then
              echo "Image is available"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Timeout waiting for image"
              exit 1
            fi
            echo "Waiting... ($i/30)"
            sleep 10
          done

      # 测试镜像
      - name: Test image
        if: github.event_name != 'pull_request'
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Success Notification
        if: success()
        run: |
          echo "::notice::Docker image successfully built and pushed to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Tags: latest, ${{ github.sha }}"
