name: Docker Image CI/CD

on:
  push:
    branches: [ "main", "fix", "feature", "next" ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'Meilisearch4TelegramSearchCKJ/src/**'
  pull_request:
    branches: [ "main", "fix", "feature" ]
    paths:
      - 'Meilisearch4TelegramSearchCKJ/src/**'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ format('{0}/{1}', github.repository_owner, 'meilisearch4telegramsearchckj') }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      checks: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build local image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan-target

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:scan-target
          format: 'table'
          exit-code: '1'  # Terminate if vulnerabilities are found
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Generate tags
        id: generate-tags
        run: |
          # Determine the tag name
          if [[ "${GITHUB_REF##*/}" == "main" || "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME="latest"
          else
            TAG_NAME="${GITHUB_REF##*/}"
          fi

          # Build the tags using the determined TAG_NAME and current commit SHA.
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG_NAME}"
          TAGS+=",${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA}"
          
          # If the workflow is triggered manually, add the input tag.
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAGS+=",${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.tag }}"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.generate-tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Wait for image to be available
        if: github.event_name != 'pull_request'
        run: |
          echo "Waiting for image to be available..."
          for i in {1..30}; do
            docker pull --platform=linux/amd64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && \
            docker pull --platform=linux/arm64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && break
            sleep 10
          done

      - name: Test image
        if: github.event_name != 'pull_request'
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Success Notification
        if: success()
        run: |
          echo "::notice::Docker image successfully built and pushed to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Tags: latest, ${{ github.sha }}"